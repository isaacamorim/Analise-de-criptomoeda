import json
import yfinance as yf
import pandas as pd
import numpy as np
import ta
import matplotlib.pyplot as plt

# Carregar configurações do JSON
with open("config.json", "r") as file:
    config = json.load(file)

assets = config["assets"]
start_date = config["start_date"]
end_date = config["end_date"]
stop_loss_range = np.array(config["stop_loss_range"])
take_profit_range = np.array(config["take_profit_range"])

# Obter dados históricos para o primeiro ativo na lista
btc = yf.download(assets[0], start=start_date, end=end_date)

# Verificar se os dados foram baixados corretamente
print("Dados de preços baixados:")
print(btc.head())

# Calcular indicadores
try:
    btc["Close"] = (
        btc["Close"].astype(float).squeeze()
    )  # Garantir que 'Close' é float e unidimensional
    rsi_indicator = ta.momentum.RSIIndicator(close=btc["Close"])
    btc["RSI"] = rsi_indicator.rsi()

    macd = ta.trend.MACD(close=btc["Close"])
    btc["MACD"] = macd.macd()
    btc["MACDsignal"] = macd.macd_signal()
    btc["MACDhist"] = macd.macd_diff()

    # Verificar se as colunas foram corretamente adicionadas
    print("Colunas disponíveis no DataFrame após cálculos:")
    print(btc.columns)
except Exception as e:
    print(f"Erro ao calcular indicadores: {e}")
    btc["RSI"] = np.nan
    btc["MACD"] = np.nan
    btc["MACDsignal"] = np.nan
    btc["MACDhist"] = np.nan

# Verificar os dados calculados
print("Dados com indicadores calculados:")
print(btc.head())


# Gerar sinais de compra/venda
def generate_signals(data):
    signals = pd.DataFrame(index=data.index)
    signals["signal"] = 0.0
    signals.loc[data["RSI"] < 30, "signal"] = 1.0  # Sinal de compra
    signals.loc[data["RSI"] > 70, "signal"] = -1.0  # Sinal de venda
    return signals


signals = generate_signals(btc)
print("Sinais de compra/venda gerados:")
print(signals.head())


# Previsão de compra e venda
def generate_recommendations(data, signals):
    recommendations = []
    for date, signal in signals["signal"].items():
        if signal == 1.0:  # Sinal de compra
            recommendations.append(
                f"{date}: Sinal de COMPRA detectado. Preço: {data['Close'][date]:.2f}"
            )
        elif signal == -1.0:  # Sinal de venda
            recommendations.append(
                f"{date}: Sinal de VENDA detectado. Preço: {data['Close'][date]:.2f}"
            )
    return recommendations


recommendations = generate_recommendations(btc, signals)
print("Recomendações de compra/venda:")
for rec in recommendations[:5]:  # Exibindo apenas as primeiras 5 recomendações
    print(rec)


# Melhor estratégia baseada em stop loss e take profit
def optimize_strategy(data, signals, stop_loss_range, take_profit_range):
    best_return = -np.inf
    best_params = None
    for stop_loss in stop_loss_range:
        for take_profit in take_profit_range:
            positions = signals["signal"].diff().fillna(0)
            portfolio = 10000  # Capital inicial
            in_position = False
            for i in range(len(data)):
                if positions.iloc[i] == 1 and not in_position:  # Compra
                    in_position = True
                    buy_price = data["Close"].iloc[i]
                    stop_loss_price = buy_price * stop_loss
                    take_profit_price = buy_price * take_profit
                elif positions.iloc[i] == -1 and in_position:  # Venda
                    in_position = False
                    portfolio += data["Close"].iloc[i] - buy_price
                elif in_position:
                    # Stop loss ou take profit
                    if data["Close"].iloc[i] <= stop_loss_price:
                        portfolio += stop_loss_price - buy_price
                        in_position = False
                    elif data["Close"].iloc[i] >= take_profit_price:
                        portfolio += take_profit_price - buy_price
                        in_position = False
            return_ = (portfolio / 10000) - 1
            if return_ > best_return:
                best_return = return_
                best_params = (stop_loss, take_profit)
    return best_params, best_return


best_params, best_return = optimize_strategy(
    btc, signals, stop_loss_range, take_profit_range
)

print(
    f"Melhores parâmetros: Stop Loss = {best_params[0]:.2f}, Take Profit = {best_params[1]:.2f}"
)
print(f"Melhor retorno esperado: {best_return:.2%}")


# Verificar preço atual e sugerir preço de compra e venda no curto prazo
def current_price_and_recommendations(data, short_term_percent=0.01):
    current_price = float(data["Close"].iloc[-1])  # Converter para float
    suggested_buy_price = current_price * (1 - short_term_percent)
    suggested_sell_price = current_price * (1 + short_term_percent)
    return current_price, suggested_buy_price, suggested_sell_price


current_price, suggested_buy_price, suggested_sell_price = (
    current_price_and_recommendations(btc)
)

print(f"Preço atual: {current_price:.2f}")
print(f"Preço sugerido para compra no curto prazo: {suggested_buy_price:.2f}")
print(f"Preço sugerido para venda no curto prazo: {suggested_sell_price:.2f}")


# Calcular o lucro possível levando em conta as taxas da Binance
def calcular_lucro(preco_compra, preco_venda, taxa_compra=0.001, taxa_venda=0.001):
    taxa_de_compra = preco_compra * taxa_compra
    taxa_de_venda = preco_venda * taxa_venda
    lucro_bruto = preco_venda - preco_compra
    lucro_liquido = lucro_bruto - taxa_de_compra - taxa_de_venda
    return lucro_liquido, taxa_de_compra, taxa_de_venda


lucro_liquido, taxa_de_compra, taxa_de_venda = calcular_lucro(
    suggested_buy_price, suggested_sell_price
)

print(f"Taxa de compra: {taxa_de_compra:.2f}")
print(f"Taxa de venda: {taxa_de_venda:.2f}")
print(
    f"Lucro possível (líquido) levando em conta taxas da Binance: {lucro_liquido:.2f}"
)

# Encontrar a última vez que a moeda esteve no preço sugerido de compra
ultima_vez_compra = btc[btc["Close"] <= suggested_buy_price].index.max()

# Calcular a porcentagem de ganho se a compra for feita no preço sugerido
percentual_ganho = (
    (suggested_sell_price - suggested_buy_price) / suggested_buy_price * 100
)

print(f"Última vez que a moeda esteve no preço sugerido de compra: {ultima_vez_compra}")
print(f"Porcentagem de ganho: {percentual_ganho:.2f}%")
